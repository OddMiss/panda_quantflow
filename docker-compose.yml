version: '3'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - DATABASE_NAME=panda
      - MONGO_USER=panda
      - MONGO_PASSWORD=panda
      - MONGO_URI=mongodb:27017
      - MONGO_AUTH_DB=admin
      - MONGO_DB=panda

  mongodb:
    image: mongo:8.0.9
    ports:
      - "27017:27017"
    depends_on:
      mongodb-keyfile:
        condition: service_completed_successfully
    volumes:
      - mongodb_data:/data/db
      - mongodb_keyfile:/opt/keyfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=panda
      - MONGO_INITDB_ROOT_PASSWORD=panda
    command: ["--replSet", "rs0", "--bind_ip_all", "--auth", "--keyFile", "/opt/keyfile/mongodb-keyfile"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb-init:
    image: mongo:8.0.9
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_INITDB_ROOT_USERNAME=panda
      - MONGO_INITDB_ROOT_PASSWORD=panda
    command: >
      mongosh --host mongodb -u panda -p panda --authenticationDatabase admin --eval '
      try {
        rs.status();
        print("Replica set already initialized");
      } catch (err) {
        if(err.code === 94 || err.message.includes("no replset config has been received")) {
          print("Initializing replica set...");
          rs.initiate({_id: "rs0", members: [{_id: 0, host: "localhost:27017"}]});
          print("Replica set initialized");
        } else {
          print("Error: " + err.message);
        }
      }'
  
  # Create keyfile for MongoDB replica set authentication
  mongodb-keyfile:
    image: mongo:8.0.9
    restart: "no"
    volumes:
      - mongodb_keyfile:/tmp/keyfile
    command: >
      bash -c "
      if [ ! -f /tmp/keyfile/mongodb-keyfile ]; then
        echo 'Creating MongoDB keyfile...'
        openssl rand -base64 756 > /tmp/keyfile/mongodb-keyfile
        chmod 600 /tmp/keyfile/mongodb-keyfile
        chown 999:999 /tmp/keyfile/mongodb-keyfile
        echo 'MongoDB keyfile created successfully'
      else
        echo 'MongoDB keyfile already exists'
      fi
      "

  rabbitmq:
    image: rabbitmq:3.12.6-management
    ports:
      - "5672:5672"   # AMQP 协议端口
      - "15672:15672" # 管理界面端口
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=123456
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
  mongodb_keyfile:
  rabbitmq_data:
